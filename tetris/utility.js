function generateBag() {
	let pieces = ['i', 'o', 't', 's', 'z', 'j', 'l'];
	let bag = new Array(7);
	let random;
	for (let i = 0; i < 7; i++) {
		random = Math.floor(Math.random() * pieces.length);
		bag[i] = pieces[random];
		pieces.splice(random, 1);
	}
	return bag;
}
class Coord { //* just for frontend
	constructor(y, x) {
		this.y = y;
		this.x = x;
	}
}
const basicRot = {
	i: [[[0, 0, 0, 0],
		[1, 1, 1, 1],
		[0, 0, 0, 0],
		[0, 0, 0, 0]],
		[[0, 0, 1, 0],
		[0, 0, 1, 0],
		[0, 0, 1, 0],
		[0, 0, 1, 0]],
		[[0, 0, 0, 0],
		[0, 0, 0, 0],
		[1, 1, 1, 1],
		[0, 0, 0, 0]],
		[[0, 1, 0, 0],
		[0, 1, 0, 0],
		[0, 1, 0, 0],
		[0, 1, 0, 0]]],

	t: [[[0, 1, 0, 0],
		[1, 1, 1, 0],
		[0, 0, 0, 0],
		[0, 0, 0, 0]],
		[[0, 1, 0, 0],
		[0, 1, 1, 0],
		[0, 1, 0, 0],
		[0, 0, 0, 0]],
		[[0, 0, 0, 0],
		[1, 1, 1, 0],
		[0, 1, 0, 0],
		[0, 0, 0, 0]],
		[[0, 1, 0, 0],
		[1, 1, 0, 0],
		[0, 1, 0, 0],
		[0, 0, 0, 0]]],

	s: [[[0, 1, 1, 0],
		[1, 1, 0, 0],
		[0, 0, 0, 0],
		[0, 0, 0, 0]],
		[[0, 1, 0, 0],
		[0, 1, 1, 0],
		[0, 0, 1, 0],
		[0, 0, 0, 0]],
		[[0, 0, 0, 0],
		[0, 1, 1, 0],
		[1, 1, 0, 0],
		[0, 0, 0, 0]],
		[[1, 0, 0, 0],
		[1, 1, 0, 0],
		[0, 1, 0, 0],
		[0, 0, 0, 0]]],
	
	z: [[[1, 1, 0, 0],
		[0, 1, 1, 0],
		[0, 0, 0, 0],
		[0, 0, 0, 0]],
		[[0, 0, 1, 0],
		[0, 1, 1, 0],
		[0, 1, 0, 0],
		[0, 0, 0, 0]],
		[[0, 0, 0, 0],
		[1, 1, 0, 0],
		[0, 1, 1, 0],
		[0, 0, 0, 0]],
		[[0, 1, 0, 0],
		[1, 1, 0, 0],
		[1, 0, 0, 0],
		[0, 0, 0, 0]]],

	j: [[[1, 0, 0, 0],
		[1, 1, 1, 0],
		[0, 0, 0, 0],
		[0, 0, 0, 0]],
		[[0, 1, 1, 0],
		[0, 1, 0, 0],
		[0, 1, 0, 0],
		[0, 0, 0, 0]],
		[[0, 0, 0, 0],
		[1, 1, 1, 0],
		[0, 0, 1, 0],
		[0, 0, 0, 0]],
		[[0, 1, 0, 0],
		[0, 1, 0, 0],
		[1, 1, 0, 0],
		[0, 0, 0, 0]]],

	l: [[[0, 0, 1, 0],
		[1, 1, 1, 0],
		[0, 0, 0, 0],
		[0, 0, 0, 0]],
		[[0, 1, 0, 0],
		[0, 1, 0, 0],
		[0, 1, 1, 0],
		[0, 0, 0, 0]],
		[[0, 0, 0, 0],
		[1, 1, 1, 0],
		[1, 0, 0, 0],
		[0, 0, 0, 0]],
		[[1, 1, 0, 0],
		[0, 1, 0, 0],
		[0, 1, 0, 0],
		[0, 0, 0, 0]]],
};
//* all kicks y MUST be inverted to adapt to the matrix's top-down order
const kicks = {
	a: [{cw: [{x: -1, y: 0}, {x: -1, y: 1}, {x: 0, y: -2}, {x: -1, y: -2}], // 0 > 1
		ccw: [{x: 1, y: 0}, {x: 1, y: 1}, {x: 0, y: -2}, {x: 1, y: -2}]}, // 0 > 3
		{cw: [{x: 1, y: 0}, {x: 1, y: -1}, {x: 0, y: 2}, {x: 1, y: 2}], // 1 > 2
		ccw: [{x: 1, y: 0}, {x: 1, y: -1}, {x: 0, y: 2}, {x: 1, y: 2}]}, // 1 > 0
		{cw: [{x: 1, y: 0}, {x: 1, y: 1}, {x: 0, y: -2}, {x: 1, y: -2}], // 2 > 3
		ccw: [{x: -1, y: 0}, {x: -1, y: 1}, {x: 0, y: -2}, {x: -1, y: -2}]}, // 2 > 1
		{cw: [{x: -1, y: 0}, {x: -1, y: -1}, {x: 0, y: 2}, {x: -1, y: 2}], // 3 > 0
		ccw: [{x: -1, y: 0}, {x: -1, y: -1}, {x: 0, y: 2}, {x: -1, y: 2}]}], // 3 > 2
	//* I kicks are in the Arika version
	i: [{cw: [{x: -2, y: 0}, {x: 1, y: 0}, {x: 1, y: 2}, {x: -2, y: -1}], // 0 > 1
		ccw: [{x: 2, y: 0}, {x: -1, y: 0}, {x: -1, y: 2}, {x: 2, y: -1}]}, // 0 > 3
		{cw: [{x: -1, y: 0}, {x: 2, y: 0}, {x: -1, y: 2}, {x: 2, y: -1}], // 1 > 2
		ccw: [{x: 2, y: 0}, {x: -1, y: 0}, {x: 2, y: 1}, {x: -1, y: -2}]}, // 1 > 0
		{cw: [{x: 2, y: 0}, {x: -1, y: 0}, {x: 2, y: 1}, {x: -1, y: -2}], // 2 > 3
		ccw: [{x: -2, y: 0}, {x: 1, y: 0}, {x: -2, y: 1}, {x: 1, y: -2}]}, // 2 > 1
		{cw: [{x: -2, y: 0}, {x: 1, y: 0}, {x: -2, y:1 }, {x: 1, y: -2}], // 3 > 0
		ccw: [{x: 1, y: 0}, {x: -2, y: 0}, {x: 1, y: 2}, {x: -2, y: -1}]}], // 3 > 2
};
const palettes = ['gradient', 'ice', 'retro'];